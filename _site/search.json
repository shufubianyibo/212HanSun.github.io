[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HanSun",
    "section": "",
    "text": "Hello!\nI am Han Sun and I’m a Data Science major in Macalester College. I’m a sophomore now. I like drawing, designing clothes and playing video games! I have some dresses I designed by myself!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is my online notebook for COMP/STAT212 course taken at Macalester College."
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html",
    "href": "activity/03-adv-ggplot-notes.html",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "",
    "text": "After this lesson, you should be able to:\n\nNavigate the ggplot2 reference page to find the functions needed to create a desired visualization\nUse the information on a function help page to construct desired plot features\n\nScan the information in the Usage section to identify function arguments that must be set\nUnderstand how the function arguments work by using information in the Arguments section\nUse the information in the the Aesthetics and Examples sections to control plot appearance\n\nIdentify when it would be necessary to use different data arguments within the ggplot() and geom_() layers"
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#learning-goals",
    "href": "activity/03-adv-ggplot-notes.html#learning-goals",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "",
    "text": "After this lesson, you should be able to:\n\nNavigate the ggplot2 reference page to find the functions needed to create a desired visualization\nUse the information on a function help page to construct desired plot features\n\nScan the information in the Usage section to identify function arguments that must be set\nUnderstand how the function arguments work by using information in the Arguments section\nUse the information in the the Aesthetics and Examples sections to control plot appearance\n\nIdentify when it would be necessary to use different data arguments within the ggplot() and geom_() layers"
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#goal",
    "href": "activity/03-adv-ggplot-notes.html#goal",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Goal",
    "text": "Goal\nThe following exercise is inspired by an assignment from the Concepts in Computing with Data course at UC Berkeley taught by Dr. Deborah Nolan.\nWe are going to recreate this NYT visualization on record setting temperatures by expanding our ggplot2 toolbox using data from San Francisco (SFO) in 2011.\n\n\n\nScreenshot of NYTimes visualization from 2015"
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#setup",
    "href": "activity/03-adv-ggplot-notes.html#setup",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Setup",
    "text": "Setup\nFirst load the tidyverse package, and read in the San Francisco weather data.\n\nlibrary(tidyverse)\nweather &lt;- read_csv(\"https://mac-stat.github.io/data/sfo_weather.csv\")"
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#data-codebook",
    "href": "activity/03-adv-ggplot-notes.html#data-codebook",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Data Codebook",
    "text": "Data Codebook\nYou will need to refer to the variable codebook below throughout this activity.\n\nMonth: Month of the year (1-12)\nDay: Day within the month (1-31)\nLow/High: Low/high temperature this day\nNormalLow/NormalHigh: Typical low/high temperature for this day of the year\nRecordLow/RecordHigh: Record low/high temperature for this day of the year\nLowYr/HighYr: Year in which the record low/high was observed\nPrecip: Amount of precipitation (inches) this day\nRecordPrecip: Record amount of precipitation for this day of the year\nPrecipYr: Year in which the record precipitation was observed\ndate: The actual date in 2011 for this day in YYYY-MM-DD format\ndateInYear: What day of the year is it? (1-365)\nRecord: Logical (TRUE/FALSE) indicating whether this day had a high temperature record\nRecordText: Text that displays the record high for this day (\"Record high: ##\")\nRecordP: Logical (TRUE/FALSE) indicating whether this day had a precipitation record\nCulmPrec: Cumulative precipitation for the month up to this day"
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#class-exercise-1",
    "href": "activity/03-adv-ggplot-notes.html#class-exercise-1",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Class Exercise 1",
    "text": "Class Exercise 1\nExamine the temperature visualization in the original NYT article.\nDiscuss the following two aspects with your group:\nData storytelling\n\nRelate the intro paragraph (“Scientists declared that 2015 was Earth’s hottest year on record…”) to the design of the visualization: Based on the intro paragraph, what key message/claim does NYT want readers to be able to explore? How did this goal inform what information is displayed in the visualization?\n\nAesthetic mapping\n\nWhat specific variables (from the codebook) underlie the visualization, and how do they map to aesthetics of the visual elements (e.g., position, size, shape, and color of the glyphs)?"
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#class-exercise-2",
    "href": "activity/03-adv-ggplot-notes.html#class-exercise-2",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Class Exercise 2",
    "text": "Class Exercise 2\nDocumentation / Reference Pages\nWe can explore the “Geoms” section of the ggplot2 reference page to find a geom that corresponds to the visual elements in the temperature plot.\nUsing both the small example visuals on the right and the names of the geom’s, brainstorm some possibilities for geom’s we might use to recreate the temperature visualization."
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#note-documentation-reference-pages",
    "href": "activity/03-adv-ggplot-notes.html#note-documentation-reference-pages",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Note: Documentation / Reference Pages",
    "text": "Note: Documentation / Reference Pages\nWe need to explore further by opening up the geom reference pages to understand if a particular geom is suitable for our task. We’ll look at the geom_point documentation page to learn the process for reading a documentation page.\nWhen looking at a help page, it is useful to first look at the Usage and Arguments sections.\n. . .\nThe Usage section shows all of the possible inputs (arguments) to the geom–these are all of the ways that a geom can be customized. Just looking at the argument names can help give a hint as to what arguments might fit our needs.\n. . .\nThe Arguments section explains in detail what each argument does and the possible values the argument can take. The mapping, data, and ... arguments will be the most commonly used by far.\n. . .\n\nmapping: This is the argument that is being used when you specify which variables should link or map to the plot aesthetics (the code inside aes()).\ndata: This is where you specify the dataset containing the variables that the geom is using.\n...: You will tend to use this for fixed aesthetics (ones that don’t correspond to a variable). For example, this is where you can set the color of all points (e.g., with color = \"red\") or the size of all points (e.g., with size = 3).\n\nA note about the data argument: Previously you have used one dataset per plot by specifying that as the first argument of ggplot().\n\n\nExample of multiple data sets passed into ggplot\n\nFor example, the code below makes a scatterplot of price vs. carat in the diamonds dataset, and the only data argument is in ggplot() (none in geom_point()).\n\ndata(diamonds)\nhead(diamonds)\n\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n\nggplot(diamonds, aes(x = carat, y = price)) +\n    geom_point() +\n    theme_classic()\n\n\n\n\n\n\n\n\n\n# Note that we can make the same plot by specifying the argument names explicitly:\nggplot(data = diamonds, mapping = aes(x = carat, y = price)) +\n    geom_point() +\n    theme_classic()\n\nSometimes we may want to use more than one dataset in a plot. For example, we have a separate dataset that contains average prices of diamonds by carat:\n\nhead(diamonds_avg_price)\n\n# A tibble: 6 × 2\n  carat avg_price\n  &lt;dbl&gt;     &lt;dbl&gt;\n1  0.2       365.\n2  0.23      486.\n3  0.26      551.\n4  0.29      601.\n5  0.32      720.\n6  0.35      801.\n\n\nWe can use this separate diamonds_avg_price dataset in the geom_point() layer to add average price information to our scatterplot:\n\nggplot(diamonds, aes(x = carat, y = price)) +\n    geom_point() +\n    geom_point(data = diamonds_avg_price, aes(x = carat, y = avg_price), color = \"deepskyblue\", size = 3)\n\n\n\n\n\n\n\n\n\n. . .\nThe Aesthetics section of a geom documentation page gives information on how the visual elements of the geom correspond to data.\nFor example, the geom_point documentation page shows that the familiar x and y aesthetics are available. It also shows some new aesthetics like stroke.\n\nWe can use the same process to look at the geom_linerange documentation page and start off our temperature visualization with the record lows and highs (light tan color: #ECEBE3):\n\n\n\nSFO weather records in 2011\n\n\n\nggplot(weather) +\n    geom_linerange(___) +\n    theme_classic()\n\n\nggplot(weather) +\n    geom_linerange(aes(x = dateInYear, ymin = RecordLow, ymax = RecordHigh),color = '#ECEBE3') +\n    theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyboard shortcuts\n\n\n\nAs you work on this plot, try to use some new keyboard shortcuts. Focus on the following:\n\nInsert code chunk: Ctrl+Alt+I (Windows). Option+Command+I (Mac).\nRun current code chunk: Ctrl+Shift+Enter (Windows). Command+Shift+Return (Mac).\nRun current line/currently selected lines: Ctrl+Enter (Windows). Command+Return (Mac)."
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#class-exercise-3",
    "href": "activity/03-adv-ggplot-notes.html#class-exercise-3",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Class Exercise 3",
    "text": "Class Exercise 3\nAdd to your temperature visualization to also display the usual temperatures (NormalLow and NormalHigh), and actual 2011 temperatures (Low and High). Your plot should look like the one below. The tan color for the usual temperatures is \"#C8B8BA\", and the red color for the actual temperatures is \"#A90248\".\n\n\n\nSFO observed, average, and record daily temperatures in 2011\n\n\n\nggplot(weather) +\n    geom_linerange(aes(x = dateInYear, ymin = RecordLow, ymax = RecordHigh),color = '#ECEBE3') +\n    geom_linerange(aes(x = dateInYear, ymin = NormalLow, ymax = NormalHigh), color = '#C8B8BA') +\n    geom_linerange(aes(x = dateInYear, ymin = Low, ymax = High), color = '#A90248') +\n    theme_classic()\n\n\n\n\n\n\n\n\n\nweather_m &lt;- weather %&gt;%\n  filter(Day == 1, Month != 1) \n  \nggplot() +\n    geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear-0.5, xmax = dateInYear+0.5, ymin = RecordLow, ymax = RecordHigh),color = '#ECEBE3') +\n    geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear-0.5, xmax = dateInYear+0.5, ymin = NormalLow, ymax = NormalHigh), color = '#C8B8BA') +\n    geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear-0.5, xmax = dateInYear+0.5, ymin = Low, ymax = High), color = '#A90248') +\n    geom_vline(data = weather_m, aes(xintercept = dateInYear))\n\n\n\n\n\n\n\n    theme_classic()\n\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      :List of 6\n  ..$ colour       : chr \"grey20\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : 'rel' num 1\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : logi NA\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n\n\n\nNote: If you’d like finer control of the width of these lines/rectangles, check out the geom_rect documentation page."
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#class-exercise-4",
    "href": "activity/03-adv-ggplot-notes.html#class-exercise-4",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Class Exercise 4",
    "text": "Class Exercise 4\nLet’s now try to recreate the visual demarcations of the months by adding vertical lines separating the months.\nBrainstorm with your groups how we might draw those vertical lines.\n\nWhat geom might we use?\nWhat subset of the data might we use in that geom layer to draw lines only at the month divisions?"
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#class-exercise-5",
    "href": "activity/03-adv-ggplot-notes.html#class-exercise-5",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Class Exercise 5",
    "text": "Class Exercise 5\nNow let’s change the x-axis labels so that the month names display in the center of each month’s slice of the plot. (Note that R has built-in variables called month.abb and month.name that contain abbreviated and full month names.)\nWe will explore two different approaches to figuring out this new challenge: Google search and AI.\n\nGoogle: Start by just using Google search queries. Collaborate with your group to try to word your search queries as carefully as possible (using the jargon that is most likely to return the most relevant results). Record search queries and your thought process in selecting which search results to look at first.\nAI: Next use ChatGPT or Gemini. Collaborate with your group to brainstorm a series of prompts that will most efficiently get you the desired results. Record the chat prompts used and output given. Evaluate the output. Do you fully understand the code generated? How can you tell that the generated code is correct?\n\nAfter we debrief on these approaches, we’ll finalize this part of the plot together."
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#group-work",
    "href": "activity/03-adv-ggplot-notes.html#group-work",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Group work",
    "text": "Group work\nWork using paired programming to create a precipitation plot that looks like the following. Share the code with each other (via Github or Slack) before your leave.\n\nThe triangles point to precipitation records. Refer to the Data Codebook above for the RecordP variable.\nThe numbers on the plot indicate the total precipitation for the month. Do some searching about the hjust and vjust options to adjust the alignment of the numbers.\nThe blue and tan colors are \"#32a3d8\" and \"#ebeae2\".\n\n\n\n\nSFO precipitation in 2011\n\n\n\n\n\n\n\n\nReminder: Record and observe\n\n\n\nAs you work through this new phase of the plot, makes notes in your personal class journal about anything that you tried that didn’t work the way you wanted: geoms that you tried but didn’t make the right plot, faulty aesthetic mappings, error messages, and warning messages.\nAlso be aware of your comforts and discomforts in this collaborative environment. Pay attention to the comforts and discomforts of your groupmates.\nWe’ll have a few minutes at the end of class to reflect holistically on today’s activity.\n\n\n\nIf you have time, keep working with each other on your plots to get them to look as below (which shows your goal for HW1 Part 1).\n\n\n\nSFO weather in 2011 (minimum requirements for HW1 Part 1 submission)\n\n\n\n\n\n\n\n\nReminder: Record and observe\n\n\n\nAs you work to finalize your plots, try as best you can to observe your strategies for getting unstuck–what sorts of things do you try? Some ideas:\n\nDraw the part of your plot that you expect your code will create. Then compare to what actually does happen.\nConsult peers for different Google queries\nLook at function documentation by entering ?function_name in the Console. See what arguments might be tweaked to get what you want."
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#reflect",
    "href": "activity/03-adv-ggplot-notes.html#reflect",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Reflect",
    "text": "Reflect\nIn terms of both coding and collaboration, what challenges did you face today? What did you do to address those challenges? What would you like to try for next time?"
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#homework-2",
    "href": "activity/03-adv-ggplot-notes.html#homework-2",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Homework 2",
    "text": "Homework 2\nHomework 2 Part 1 involves finishing this NYT visualization recreation and is part of Homework 2."
  },
  {
    "objectID": "activity/03-adv-ggplot-notes.html#done",
    "href": "activity/03-adv-ggplot-notes.html#done",
    "title": "Advanced Data Visualization in ggplot2 (Notes)",
    "section": "Done!",
    "text": "Done!\n\nRender your notes.\nCheck the solutions in the course website (Solution drop downs).\nIf you finish all that during class, start your homework!"
  },
  {
    "objectID": "Homework/homework-2-shufubianyibo/HW2_Part2.html",
    "href": "Homework/homework-2-shufubianyibo/HW2_Part2.html",
    "title": "Advanced visualization with ggplot2",
    "section": "",
    "text": "Instructions\nTask: Open up the New York Times article A Summer of Strikes, and scroll down to the plot titled “Union membership has fallen sharply over the past four decades (Share of the work force in a union, by industry)”.\n\nUsing ggplot2 and other tools in R, recreate this plot. Note that you will need to create the data underlying the plot yourself. You can create this data in R with tibble(). You can also write the data in Excel or Google Sheets and export it as a CSV file.\nRequirements for high passing:\n\nOverall\n\nPanels for “All workers”, “By Sector”, and “By Industry” are shown.\nArrows showing the change from 1983 to 2022 are shown.\n\nNote: be sure that the arrows all point in the correct direction!\n\nThe actual percentages in 1983 and 2022 are shown as text.\nX-axis tick marks are at 0, 25, and 50.\nPlot title says “Union membership has fallen sharply over the past four decades”.\nPlot subtitle says “Share of the work force in a union, by industry”.\n\nResource reflection\n\nAt least 1 resource is listed\nAt least 3 sentences about resources and their helpfulness in the task\n\n\nBonus: Additional possibilites to enhance your vizualization include adjusting the default aesthetics of the arrows, aligning your plots neatly, and adding margins in order to left-align the y-axis text.\nSubmission: Click the “Render” button in RStudio to knit a self-contained HTML with all images embedded. Commit and push changes to this file as well as the generated HTML. Push your changes to GitHub by midnight on the deadline. Note that your submission is incomplete without a readable, rendered HTML in addition to the qmd file in your Github repo.\n\n\nSetup\n\n# Code for loading packages\n# And code for reading in data if using the Excel/Google Sheets--&gt;CSV approach\n\n\n# Code for generating the data (if using the tibble() approach)\n\n\n\nVisualization\n\n# Code for recreating the visualization\n# Use as many code chunks as you need to organize your work well\n\n\n\nResources Reflection (required)\nWhat resources did you use to help with this assignment? Please list below. Then write 3-5 sentence reflection on which resources were most helpful in finishing this task.\nResources:\n\n\n\n\n\nReflection:"
  },
  {
    "objectID": "TidyTuesday/TidyTue1.html",
    "href": "TidyTuesday/TidyTue1.html",
    "title": "TidyTue1",
    "section": "",
    "text": "Import Data\n\nexped_tidy &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-21/exped_tidy.csv')\npeaks_tidy &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-01-21/peaks_tidy.csv')\n\n\n\nWhich mountain range (HIMAL_FACTOR) has the highest average peak height (HEIGHTM)?\n\n\nWhat is the distribution of peak heights (HEIGHTM) for peaks that are open (OPEN) versus those that are not?\n\n\nWhich climbing routes (ROUTE1, ROUTE2, ROUTE3, ROUTE4) have the highest success rates (SUCCESS1, SUCCESS2, SUCCESS3, SUCCESS4) across all expeditions?"
  },
  {
    "objectID": "activity/activity1/file_org_activity/code/clean/cleaning.html",
    "href": "activity/activity1/file_org_activity/code/clean/cleaning.html",
    "title": "Cleaning SFO weather data",
    "section": "",
    "text": "Tasks\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\n\n\nRead in the weather data in this file with the correct relative file path.\n\n\nFind the weather data within the file structure provided in the .zip file for this activity.\n\n\nweather  &lt;- read_csv(\"../../data/raw/weather.csv\")\n\nRows: 365 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): date, RecordText\ndbl (14): Month, Day, Low, High, NormalLow, NormalHigh, RecordLow, LowYr, Re...\nlgl  (2): Record, RecordP\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nThere is a variable that has values that don’t make sense in the data context. Figure out which variable this is and clean it up by making those values missing using na_if().\n\n\nweather_clean &lt;- weather%&gt;%\n  mutate(PrecipYr = na_if(PrecipYr, 99999))\n\n\nCreate a variable called dateInYear that indicates the day of the year (1-365) for each case. (Jan 1 should be 1, and Dec 31 should be 365).\n\n\nweather_date &lt;- weather_clean%&gt;%\n  mutate(dateInYear = yday(mdy(date)))\n\n\nCreate a variable called month_name that shows the 3-letter abbreviation for each case.\nSave your wrangled data to the data/clean/ folder using write_csv(). Name this file weather_clean.csv. Look up the documentation for this function by entering ?write_csv in the Console. You’ll need to write an appropriate relative path.\n\nNotes that may help for the data wrangling:\n\nmonth.abb is a built-in object in R with 3-letter month abbreviations\nYou can create your own data frame with the tibble() function. Look up the documentation for this function by entering ?tibble::tibble in the Console.\nYou can create regular sequences in R with :.\n\nExample: 3:5 generates the sequence c(3, 4, 5).\n\nYou can also create regular sequences in R with seq(). Look up the documentation for this function by entering ?seq in the Console.\n\nExample: seq(from = 3, to = 5, by = 1) generates the sequence c(3, 4, 5).\n\n\nPracticing your keyboard shortcuts. Try out the following as you work on this exercise:\n\nTab completion (Try this out when writing your file paths! Typing out a partial path will pull up a mini file-explorer)\nInsert a code chunk\nRun a code chunk\nNavigating around words and lines (selecting and deleting them)\nRun selected lines (not a whole code chunk)\n\n\n\nImplementation"
  },
  {
    "objectID": "Homework/homework-2-shufubianyibo/HW2_Part1.html",
    "href": "Homework/homework-2-shufubianyibo/HW2_Part1.html",
    "title": "Advanced visualization with ggplot2",
    "section": "",
    "text": "Instructions\nTask: Using ggplot2 and other tools in R, recreate the original New York Times graphic to the greatest extent possible. Try to get as close as possible to the figure below:\n\n\n\n\n\nYou will need to use reference pages and documentation to discover necessary tools. For example, you may want to Google search “ggplot multiple plots”. When looking through results, check publication dates and use newer references. Some helpful resources could include R documentation, Stack Overflow, and R cheatsheets.\nRequirements for high passing:\n\nTemperature graph\n\nBands for the record, normal, and actual highs and lows are shown in the correct colors.\nDownward triangles point to the record high temperatures above the red band.\nText displays the record high temperatures above the triangles.\nX-axis label: 3-letter month abbreviations appear in the middle of each month.\nY-axis label: Tick marks at 0, 40, 80, and 120 only.\nVertical lines separate the months.\nTitle of “Temperature” is included.\n\nPrecipitation\n\nTan area and blue line reflecting the monthly cumulative precipitation is included.\nText (number) for cumulative precipitation for each month is included at the end of each month just above the blue line.\nDownward triangles point to the record precipitation days.\nVertical lines separate the months.\nTitle of “Precipitation” is included.\n\nOverall\n\nBoth the temperature and precipitation graphs are in one figure.\nThe temperature plot takes up more vertical space than the precipitation plot.\nThe title “SFO weather in 2011” is present.\n\nResource reflection\n\nAt least 1 resource is listed\nAt least 3 sentences about resources and their helpfulness in the task\n\n\nBonus: If you’d like further practice, recreate the legend in the temperature graph that shows how the colored lines relate to record, normal, and actual highs.\nSubmission: Click the “Render” button in RStudio to knit a self-contained HTML with all images embedded. Commit and push changes to this file as well as the generated HTML. Push your changes to GitHub by midnight on the deadline. Note that your submission is incomplete without a readable, rendered HTML in addition to the qmd file in your Github repo.\n\n\nSetup\n\n# Code for loading packages and reading in data\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nweather &lt;- read_csv(\"https://mac-stat.github.io/data/sfo_weather.csv\")\n\nRows: 365 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (1): RecordText\ndbl  (15): Month, Day, Low, High, NormalLow, NormalHigh, RecordLow, LowYr, R...\nlgl   (2): Record, RecordP\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nVisualization\n\n# Code for recreating the visualization\n# Use as many code chunks as you need to organize your work well\n\n\nweather_m &lt;- weather %&gt;%\n  filter(Day == 1, Month != 1) \n  \nggplot() +\n    geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear-0.5, xmax = dateInYear+0.5, ymin = RecordLow, ymax = RecordHigh),color = '#ECEBE3') +\n    geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear-0.5, xmax = dateInYear+0.5, ymin = NormalLow, ymax = NormalHigh), color = '#C8B8BA') +\n    geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear-0.5, xmax = dateInYear+0.5, ymin = Low, ymax = High), color = '#A90248') +\n    geom_vline(data = weather_m, aes(xintercept = dateInYear), linetype=\"dotted\")+\n    theme_classic()\n\nWarning in geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear - :\nIgnoring unknown aesthetics: x\n\n\nWarning in geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear - :\nIgnoring unknown aesthetics: x\n\n\nWarning in geom_rect(data = weather, aes(x = dateInYear, xmin = dateInYear - :\nIgnoring unknown aesthetics: x\n\n\n\n\n\n\n\n\n\n\n\nResources Reflection (required)\nWhat resources did you use to help with this assignment? Please list below. Then write 3-5 sentence reflection on which resources were most helpful in finishing this task.\nResources:\n\n\n\n\n\nReflection:"
  }
]